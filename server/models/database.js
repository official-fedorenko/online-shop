const sqlite3 = require("sqlite3").verbose();
const path = require("path");
const bcrypt = require("bcryptjs");
const fs = require("fs");

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ä–µ–¥—ã
let dbPath;
if (process.env.NODE_ENV === "production") {
  // –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
  const possiblePaths = ["/tmp", process.cwd(), __dirname];
  let tmpDir = null;

  for (const testPath of possiblePaths) {
    try {
      if (fs.existsSync(testPath)) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å
        const testFile = path.join(testPath, "test-write.tmp");
        fs.writeFileSync(testFile, "test");
        fs.unlinkSync(testFile);
        tmpDir = testPath;
        break;
      }
    } catch (e) {
      continue;
    }
  }

  if (!tmpDir) {
    console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–∞–ø–∫—É –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
    process.exit(1);
  }

  dbPath = path.join(tmpDir, "shop.db");
  console.log("üöÄ –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º", tmpDir, "–¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö");
} else {
  // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É db
  const dbDir = path.join(__dirname, "../db");
  if (!fs.existsSync(dbDir)) {
    fs.mkdirSync(dbDir, { recursive: true });
  }
  dbPath = path.join(dbDir, "shop.db");
  console.log("üîß –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É db");
}

// –°–æ–∑–¥–∞—ë–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database(dbPath, (err) => {
  if (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", err.message);
    console.error("üìÇ –ü—É—Ç—å –∫ –±–∞–∑–µ:", dbPath);
    process.exit(1);
  } else {
    console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
    console.log("üìÇ –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:", dbPath);
    console.log("üîß –°—Ä–µ–¥–∞:", process.env.NODE_ENV || "development");
  }
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç–∞–µ—Ç
db.get("SELECT 1", (err) => {
  if (err) {
    console.error("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç:", err.message);
    process.exit(1);
  } else {
    console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ");
  }
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const initDatabase = async () => {
  return new Promise((resolve, reject) => {
    db.serialize(() => {
      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      db.run(
        `
                CREATE TABLE IF NOT EXISTS users (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    nickname TEXT UNIQUE NOT NULL,
                    email TEXT UNIQUE NOT NULL,
                    password TEXT NOT NULL,
                    role TEXT DEFAULT 'user',
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            `,
        (err) => {
          if (err) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã users:", err);
            reject(err);
            return;
          }
          console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }
      );

      // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Ç–æ–≤–∞—Ä–æ–≤
      db.run(
        `
                CREATE TABLE IF NOT EXISTS products (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    description TEXT,
                    price REAL NOT NULL,
                    image_url TEXT,
                    category TEXT,
                    in_stock BOOLEAN DEFAULT 1,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            `,
        (err) => {
          if (err) {
            console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã products:", err);
            reject(err);
            return;
          }
          console.log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ products —Å–æ–∑–¥–∞–Ω–∞ –∏–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
        }
      );

      // –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      createDefaultAdmin()
        .then(() => {
          // –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ —Ç–æ–≤–∞—Ä–æ–≤
          createDemoProducts()
            .then(() => {
              console.log("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞");
              resolve();
            })
            .catch(reject);
        })
        .catch(reject);
    });
  });
};

// –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
const createDefaultAdmin = async () => {
  return new Promise((resolve, reject) => {
    const adminEmail = "admin@shop.com";
    const adminNickname = "Admin";
    const adminPassword = "admin123";

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
    db.get(
      "SELECT id FROM users WHERE email = ? OR nickname = ?",
      [adminEmail, adminNickname],
      async (err, row) => {
        if (err) {
          reject(err);
          return;
        }

        if (!row) {
          // –°–æ–∑–¥–∞—ë–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
          const hashedPassword = await bcrypt.hash(adminPassword, 12);
          db.run(
            "INSERT INTO users (nickname, email, password, role) VALUES (?, ?, ?, ?)",
            [adminNickname, adminEmail, hashedPassword, "admin"],
            (err) => {
              if (err) {
                reject(err);
              } else {
                console.log("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å–æ–∑–¥–∞–Ω");
                console.log("   Email: admin@shop.com");
                console.log("   Nickname: Admin");
                console.log("   Password: admin123");
                resolve();
              }
            }
          );
        } else {
          console.log("‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç");
          resolve();
        }
      }
    );
  });
};

// –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ —Ç–æ–≤–∞—Ä–æ–≤
const createDemoProducts = async () => {
  return new Promise((resolve, reject) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —Ç–æ–≤–∞—Ä—ã
    db.get("SELECT COUNT(*) as count FROM products", (err, row) => {
      if (err) {
        reject(err);
        return;
      }

      if (row.count === 0) {
        const demoProducts = [
          {
            name: "iPhone 15 Pro",
            description: "–ù–æ–≤–µ–π—à–∏–π —Å–º–∞—Ä—Ç—Ñ–æ–Ω Apple —Å —Ç–∏—Ç–∞–Ω–æ–≤—ã–º –∫–æ—Ä–ø—É—Å–æ–º",
            price: 89999,
            image_url: "https://via.placeholder.com/300x300?text=iPhone+15+Pro",
            category: "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã",
          },
          {
            name: "MacBook Air M2",
            description: "–£–ª—å—Ç—Ä–∞–±—É–∫ Apple –Ω–∞ —á–∏–ø–µ M2",
            price: 129999,
            image_url: "https://via.placeholder.com/300x300?text=MacBook+Air",
            category: "–ù–æ—É—Ç–±—É–∫–∏",
          },
          {
            name: "Samsung Galaxy S24",
            description: "–§–ª–∞–≥–º–∞–Ω—Å–∫–∏–π Android —Å–º–∞—Ä—Ç—Ñ–æ–Ω",
            price: 79999,
            image_url: "https://via.placeholder.com/300x300?text=Galaxy+S24",
            category: "–°–º–∞—Ä—Ç—Ñ–æ–Ω—ã",
          },
          {
            name: 'iPad Pro 12.9"',
            description: "–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω—à–µ—Ç Apple",
            price: 99999,
            image_url: "https://via.placeholder.com/300x300?text=iPad+Pro",
            category: "–ü–ª–∞–Ω—à–µ—Ç—ã",
          },
          {
            name: "AirPods Pro 2",
            description: "–ë–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã–µ –Ω–∞—É—à–Ω–∏–∫–∏ —Å —à—É–º–æ–ø–æ–¥–∞–≤–ª–µ–Ω–∏–µ–º",
            price: 24999,
            image_url: "https://via.placeholder.com/300x300?text=AirPods+Pro",
            category: "–ê—É–¥–∏–æ",
          },
        ];

        let completed = 0;
        demoProducts.forEach((product) => {
          db.run(
            "INSERT INTO products (name, description, price, image_url, category) VALUES (?, ?, ?, ?, ?)",
            [
              product.name,
              product.description,
              product.price,
              product.image_url,
              product.category,
            ],
            (err) => {
              if (err) {
                console.error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ —Ç–æ–≤–∞—Ä–∞:", err);
              }
              completed++;
              if (completed === demoProducts.length) {
                console.log("‚úÖ –î–µ–º–æ —Ç–æ–≤–∞—Ä—ã —Å–æ–∑–¥–∞–Ω—ã");
                resolve();
              }
            }
          );
        });
      } else {
        console.log("‚úÖ –¢–æ–≤–∞—Ä—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç");
        resolve();
      }
    });
  });
};

module.exports = {
  db,
  initDatabase,
};
